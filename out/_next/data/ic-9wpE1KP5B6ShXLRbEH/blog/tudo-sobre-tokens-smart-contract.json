{"pageProps":{"page":{"__metadata":{"id":"content/pages/blog/tudo-sobre-tokens-smart-contract.md","source":"sourcebit-source-filesystem","sourceName":"pages","sourcePath":"/Users/coflow/Desktop/digifi_ei/content/pages","relSourcePath":"blog/tudo-sobre-tokens-smart-contract.md","relProjectPath":"content/pages/blog/tudo-sobre-tokens-smart-contract.md","urlPath":"/blog/tudo-sobre-tokens-smart-contract","pageCssClasses":["page-blog","page-blog-tudo-sobre-tokens-smart-contract"]},"layout":"PostLayout","metaTitle":null,"addTitleSuffix":true,"metaTags":[],"title":"Tudo sobre Tokens Smart Contract","titlePt":"Tudo sobre Tokens Smart Contract","colors":"colors-d","date":"2023-01-24","excerpt":"N√£o esque√ßa esse DETALHE VITAL","excerptFr":"N√£o esque√ßa esse DETALHE VITAL","featuredImage":{"type":"ImageBlock","url":"/images/CAPAS-Tudo sobre Tokens Smart Contract.png","altText":"Tudo sobre Tokens Smart Contract","caption":"Tudo sobre Tokens Smart Contract","width":800,"height":450},"media":{"type":"ImageBlock","url":"/images/CAPAS-Tudo sobre Tokens Smart Contract.png","altText":"Tudo sobre Tokens Smart Contract","caption":"Tudo sobre Tokens Smart Contract","width":800,"height":450},"bottomSections":[],"markdown_content_pt":"Voc√™ j√° ouviu falar de tokens smart contracts, mas n√£o sabe o que s√£o? N√£o se preocupe, a gente explica tudo para voc√™! Basicamente, existem dois tipos de tokens smart contracts: os fung√≠veis e os n√£o-fung√≠veis.\n\nOs tokens fung√≠veis s√£o como moedas comuns, onde cada token √© exatamente igual ao outro e tem o mesmo valor. O padr√£o ERC-20 √© o padr√£o de tokens fung√≠veis no Ethereum, enquanto o FungibleToken √© o equivalente no blockchain Flow. A criptomoeda da rede FLOW √© um token fung√≠vel que implementa o padr√£o FungibleToken do Flow.\n\nJ√° os tokens n√£o-fung√≠veis s√£o os famosos NFTs, que s√£o ativos que est√£o agrupados sob um tema conectado, mas cada token √© √∫nico e tem metadados e valores diferentes. Os padr√µes ERC-721 e ERC-1155 s√£o os padr√µes de NFTs no Ethereum, enquanto o NonFungibleToken √© o equivalente no blockchain Flow. Os momentos da NBA Top Shot s√£o exemplos de NFTs do Flow.\n\nEsses dois tipos de smart contracts s√£o importantes porque s√£o os mais comuns em quase todos os blockchains. Eles precisam ser interoper√°veis entre si, ent√£o precisam utilizar um padr√£o comum. Utilizamos um contrato Cadence para definir o padr√£o.\n\nAs interfaces s√£o uma parte MUITO importante da programa√ß√£o Cadence, ent√£o se voc√™ ainda n√£o leu o documento de refer√™ncia da linguagem sobre interfaces, clique no link acima e comece agora! üòÉ\n\nQualquer contrato pode implementar a funcionalidade definida em uma interface de contrato. Para tokens, essas interfaces cont√™m campos como saldo e fun√ß√µes como sacar e depositar. Elas garantem que todo smart contract que segue a interface tenha que seguir as mesmas regras.\n\nEnt√£o, outros contratos podem especificar que podem interagir com qualquer token que siga a interface comum. Isso torna a interoperabilidade MUITO mais f√°cil. Qualquer um pode plugar um novo token no ecossistema ou em um novo aplicativo que usa o token comum sem precisar fazer qualquer integra√ß√£o especializada.\n\nVoc√™ pode ver os padr√µes para FungibleToken e NonFungibleToken\n\nAs interfaces (por enquanto) especificam assinaturas e tipos EXATOS\n\nD√™ uma olhada na interface de token fung√≠vel. Toda vez que o tipo @Vault √© especificado, como na fun√ß√£o depositar ou sacar, @Vault se refere ao @FungibleToken.Vault, o que significa que o par√¢metro ou o valor de retorno √© do tipo FungibleToken.Vault. Os contratos que implementam a interface devem corresponder exatamente √†s especifica√ß√µes da interface. A assinatura exata da fun√ß√£o depositar tem que ser pub fun depositar(de: @FungibleToken.Vault). Ent√£o, se eu estivesse criando um contrato JoshToken, minha fun√ß√£o depositar n√£o seria permitida aceitar um @JoshToken.Vault. Ela ainda precisaria aceitar um FungibleToken.Vault, assim como a interface padr√£o especifica. Se algu√©m quisesse chamar minha fun√ß√£o depositar com um JoshToken.Vault, eles primeiro precisariam convert√™-lo para um FungibleToken.Vault antes de pass√°-lo como par√¢metro.\nIsso tamb√©m se aplica ao padr√£o NFT. A fun√ß√£o depositar nas implementa√ß√µes dos padr√µes TEM que ser pub fun depositar(token: @NonFungibleToken.NFT)\nIsso causa um problema! Se o tipo do par√¢metro que √© passado para a fun√ß√£o depositar √© apenas um token gen√©rico, ent√£o qualquer um poderia depositar qualquer token que quisesse em sua Vault ou Collection! Isso √© obviamente um problema, porque a oferta do token poderia ser aumentada artificialmente depositando tokens aleat√≥rios em qualquer Vault.\nA PARTE CRITICA\nIsso me leva ao assunto do t√≠tulo desse post: a parte cr√≠tica de cada contrato de token que voc√™ n√£o pode esquecer. Para garantir que apenas tokens do tipo correto sejam depositados em sua Vault ou Collection, voc√™ precisa converter o objeto gen√©rico para o tipo concreto de seu contrato com uma linha como essa.\n// for√ßar a convers√£o de `` para um concreto ExampleToken.Vault\nlet vault <- from as! @ExampleToken.Vault\nas! √© o operador de convers√£o for√ßada. Ele tenta converter o objeto √† esquerda do operador como o tipo √† direita do operador. Se a convers√£o for bem-sucedida, ou seja, se o objeto for o tipo √† direita, a execu√ß√£o da fun√ß√£o continua com o objeto como o novo tipo convertido. Se a convers√£o falhar, a execu√ß√£o para e o estado √© revertido. Com essa linha, se um tipo de token diferente for depositado, o dep√≥sito falhar√° e voc√™ poder√° manter a integridade de seu token!\nVoc√™ deve ver essa linha em muitos contratos inteligentes amplamente utilizados na mainnet, como o contrato FlowToken e o contrato NBA Top Shot. Se voc√™ encontrar um contrato de token que n√£o tem uma fun√ß√£o depositar ou sacar, ent√£o √© prov√°vel que esse contrato n√£o seja projetado para armazenar ou transferir tokens. √â importante fazer uma investiga√ß√£o aprofundada antes de interagir com qualquer contrato de token, pois as consequ√™ncias de interagir com um contrato malicioso ou mal projetado podem ser graves. Certifique-se de entender completamente como o contrato funciona e verifique se ele foi auditado por especialistas independentes antes de enviar quaisquer tokens para ele.\n\nEm um contrato de token, a fun√ß√£o depositar ou sacar √© respons√°vel por permitir que os usu√°rios envie ou retire tokens do contrato. O s√≠mbolo \"@Vault\" √© usado para se referir ao pr√≥prio contrato, ou seja, a \"caixa-forte\" onde os tokens est√£o armazenados. √â importante verificar se o contrato est√° seguro e auditable antes de enviar quaisquer tokens para ele, para evitar perda de fundos devido a vulnerabilidades ou erros no c√≥digo. √â recomend√°vel ler a documenta√ß√£o e verificar a reputa√ß√£o do desenvolvedor antes de fazer qualquer opera√ß√£o com o contrato.\n\n√â importante ler toda a documenta√ß√£o dispon√≠vel e entender completamente as funcionalidades e riscos do contrato antes de interagir com ele. Al√©m disso, √© recomend√°vel procurar por coment√°rios e revis√µes de outros usu√°rios para ter uma no√ß√£o da confiabilidade do contrato. Se poss√≠vel, √© aconselh√°vel testar pequenas quantidades de tokens antes de fazer transa√ß√µes maiores. Em geral, √© importante sempre manter uma boa gest√£o de risco ao lidar com contratos de tokens.\n\nIsso inclui verificar a reputa√ß√£o do desenvolvedor, estudar o c√≥digo do contrato e verificar se ele est√° auditado por uma terceira parte confi√°vel. Al√©m disso, √© importante sempre manter uma c√≥pia de seguran√ßa de suas chaves privadas e n√£o depositar mais do que voc√™ est√° disposto a perder. √â sempre recomend√°vel fazer sua pr√≥pria pesquisa e n√£o confiar apenas na opini√£o de outras pessoas.\n\n\n","metaDescription":null,"socialImage":null,"markdown_content":"Voc√™ j√° ouviu falar de tokens smart contracts, mas n√£o sabe o que s√£o? N√£o se preocupe, a gente explica tudo para voc√™! Basicamente, existem dois tipos de tokens smart contracts: os fung√≠veis e os n√£o-fung√≠veis.\n\nOs tokens fung√≠veis s√£o como moedas comuns, onde cada token √© exatamente igual ao outro e tem o mesmo valor. O padr√£o ERC-20 √© o padr√£o de tokens fung√≠veis no Ethereum, enquanto o FungibleToken √© o equivalente no blockchain Flow. A criptomoeda da rede FLOW √© um token fung√≠vel que implementa o padr√£o FungibleToken do Flow.\n\nJ√° os tokens n√£o-fung√≠veis s√£o os famosos NFTs, que s√£o ativos que est√£o agrupados sob um tema conectado, mas cada token √© √∫nico e tem metadados e valores diferentes. Os padr√µes ERC-721 e ERC-1155 s√£o os padr√µes de NFTs no Ethereum, enquanto o NonFungibleToken √© o equivalente no blockchain Flow. Os momentos da NBA Top Shot s√£o exemplos de NFTs do Flow.\n\nEsses dois tipos de smart contracts s√£o importantes porque s√£o os mais comuns em quase todos os blockchains. Eles precisam ser interoper√°veis entre si, ent√£o precisam utilizar um padr√£o comum. Utilizamos um contrato Cadence para definir o padr√£o.\n\nAs interfaces s√£o uma parte MUITO importante da programa√ß√£o Cadence, ent√£o se voc√™ ainda n√£o leu o documento de refer√™ncia da linguagem sobre interfaces, clique no link acima e comece agora! üòÉ\n\nQualquer contrato pode implementar a funcionalidade definida em uma interface de contrato. Para tokens, essas interfaces cont√™m campos como saldo e fun√ß√µes como sacar e depositar. Elas garantem que todo smart contract que segue a interface tenha que seguir as mesmas regras.\n\nEnt√£o, outros contratos podem especificar que podem interagir com qualquer token que siga a interface comum. Isso torna a interoperabilidade MUITO mais f√°cil. Qualquer um pode plugar um novo token no ecossistema ou em um novo aplicativo que usa o token comum sem precisar fazer qualquer integra√ß√£o especializada.\n\nVoc√™ pode ver os padr√µes para FungibleToken e NonFungibleToken\n\nAs interfaces (por enquanto) especificam assinaturas e tipos EXATOS\n\nD√™ uma olhada na interface de token fung√≠vel. Toda vez que o tipo @Vault √© especificado, como na fun√ß√£o depositar ou sacar, @Vault se refere ao @FungibleToken.Vault, o que significa que o par√¢metro ou o valor de retorno √© do tipo FungibleToken.Vault. Os contratos que implementam a interface devem corresponder exatamente √†s especifica√ß√µes da interface. A assinatura exata da fun√ß√£o depositar tem que ser pub fun depositar(de: @FungibleToken.Vault). Ent√£o, se eu estivesse criando um contrato JoshToken, minha fun√ß√£o depositar n√£o seria permitida aceitar um @JoshToken.Vault. Ela ainda precisaria aceitar um FungibleToken.Vault, assim como a interface padr√£o especifica. Se algu√©m quisesse chamar minha fun√ß√£o depositar com um JoshToken.Vault, eles primeiro precisariam convert√™-lo para um FungibleToken.Vault antes de pass√°-lo como par√¢metro.\nIsso tamb√©m se aplica ao padr√£o NFT. A fun√ß√£o depositar nas implementa√ß√µes dos padr√µes TEM que ser pub fun depositar(token: @NonFungibleToken.NFT)\nIsso causa um problema! Se o tipo do par√¢metro que √© passado para a fun√ß√£o depositar √© apenas um token gen√©rico, ent√£o qualquer um poderia depositar qualquer token que quisesse em sua Vault ou Collection! Isso √© obviamente um problema, porque a oferta do token poderia ser aumentada artificialmente depositando tokens aleat√≥rios em qualquer Vault.\nA PARTE CRITICA\nIsso me leva ao assunto do t√≠tulo desse post: a parte cr√≠tica de cada contrato de token que voc√™ n√£o pode esquecer. Para garantir que apenas tokens do tipo correto sejam depositados em sua Vault ou Collection, voc√™ precisa converter o objeto gen√©rico para o tipo concreto de seu contrato com uma linha como essa.\n// for√ßar a convers√£o de \\`\\` para um concreto ExampleToken.Vault\nlet vault <- from as! @ExampleToken.Vault\nas! √© o operador de convers√£o for√ßada. Ele tenta converter o objeto √† esquerda do operador como o tipo √† direita do operador. Se a convers√£o for bem-sucedida, ou seja, se o objeto for o tipo √† direita, a execu√ß√£o da fun√ß√£o continua com o objeto como o novo tipo convertido. Se a convers√£o falhar, a execu√ß√£o para e o estado √© revertido. Com essa linha, se um tipo de token diferente for depositado, o dep√≥sito falhar√° e voc√™ poder√° manter a integridade de seu token!\nVoc√™ deve ver essa linha em muitos contratos inteligentes amplamente utilizados na mainnet, como o contrato FlowToken e o contrato NBA Top Shot. Se voc√™ encontrar um contrato de token que n√£o tem uma fun√ß√£o depositar ou sacar, ent√£o √© prov√°vel que esse contrato n√£o seja projetado para armazenar ou transferir tokens. √â importante fazer uma investiga√ß√£o aprofundada antes de interagir com qualquer contrato de token, pois as consequ√™ncias de interagir com um contrato malicioso ou mal projetado podem ser graves. Certifique-se de entender completamente como o contrato funciona e verifique se ele foi auditado por especialistas independentes antes de enviar quaisquer tokens para ele.\n\nEm um contrato de token, a fun√ß√£o depositar ou sacar √© respons√°vel por permitir que os usu√°rios envie ou retire tokens do contrato. O s√≠mbolo \"@Vault\" √© usado para se referir ao pr√≥prio contrato, ou seja, a \"caixa-forte\" onde os tokens est√£o armazenados. √â importante verificar se o contrato est√° seguro e auditable antes de enviar quaisquer tokens para ele, para evitar perda de fundos devido a vulnerabilidades ou erros no c√≥digo. √â recomend√°vel ler a documenta√ß√£o e verificar a reputa√ß√£o do desenvolvedor antes de fazer qualquer opera√ß√£o com o contrato.\n\n√â importante ler toda a documenta√ß√£o dispon√≠vel e entender completamente as funcionalidades e riscos do contrato antes de interagir com ele. Al√©m disso, √© recomend√°vel procurar por coment√°rios e revis√µes de outros usu√°rios para ter uma no√ß√£o da confiabilidade do contrato. Se poss√≠vel, √© aconselh√°vel testar pequenas quantidades de tokens antes de fazer transa√ß√µes maiores. Em geral, √© importante sempre manter uma boa gest√£o de risco ao lidar com contratos de tokens.\n\nIsso inclui verificar a reputa√ß√£o do desenvolvedor, estudar o c√≥digo do contrato e verificar se ele est√° auditado por uma terceira parte confi√°vel. Al√©m disso, √© importante sempre manter uma c√≥pia de seguran√ßa de suas chaves privadas e n√£o depositar mais do que voc√™ est√° disposto a perder. √â sempre recomend√°vel fazer sua pr√≥pria pesquisa e n√£o confiar apenas na opini√£o de outras pessoas.\n\n"},"site":{"__metadata":{"id":"content/data/config.json","source":"sourcebit-source-filesystem","sourceName":"data","sourcePath":"/Users/coflow/Desktop/digifi_ei/content/data","relSourcePath":"config.json","relProjectPath":"content/data/config.json"},"type":"Config","header":{"headerVariant":"variant-b","isSticky":true,"primaryColors":"colors-b","secondaryColors":"colors-d","isTitleVisible":false,"primaryLinks":[{"type":"Link","label":"Home","altText":"Inicio","url":"/","showIcon":false,"icon":"arrowRight","iconPosition":"right","elementId":""},{"type":"DropdownLink","label":"About","dropdownLinks":[{"type":"Link","label":"Curso Cadence","url":"/curso","altText":"Curso Cadence"},{"type":"Link","label":"Blog","altText":"Blog","url":"/blog","showIcon":true,"icon":"arrowRight","iconPosition":"right","elementId":""},{"type":"Link","label":"Learn More","altText":"","url":"/curso","showIcon":false,"icon":"arrowRight","iconPosition":"right","elementId":""}]},{"type":"DropdownLink","label":"Volunteers","dropdownLinks":[{"type":"Link","label":"2023","altText":"Link to 2023 team's page","url":"/registro/2023","showIcon":false,"icon":"arrowRight","iconPosition":"right","elementId":""},{"type":"Link","label":"Advocates","altText":"Advocates","url":"https://flow.coflow.com.br/flow-brasil-embaixador-aprendiz/","showIcon":true,"icon":"arrowRight","iconPosition":"right","elementId":""}]},{"type":"DropdownLink","label":"Partnerships","altText":"Parcerias","dropdownLinks":[{"type":"Link","label":"GeekHunter","altText":"Recurtamento e Sele√ß√£o","url":"/2023/janeiro/parcerias/geekhunter/","showIcon":true,"icon":"arrowRight","iconPosition":"left","elementId":""},{"type":"Link","label":"News","altText":"Novidades","url":"/2023/janeiro/news","showIcon":true,"icon":"arrowRight","iconPosition":"right","elementId":""}]},{"type":"Link","label":"Blog ","altText":"Blog","url":"/blog","showIcon":true,"icon":"arrowRightCircle","iconPosition":"left","elementId":""}],"secondaryLinks":[{"type":"Button","label":"Join Discord","altText":"Entrar no Discord","style":"secondary","url":"https://discord.com/invite/hT8EpC5mUN","showIcon":true,"icon":"cart","iconPosition":"right","elementId":""}],"styles":{"self":{"width":"wide","padding":["pl-5","pt-5","pb-5","pr-5"]}},"logo":{"type":"ImageBlock","url":"/images/padrao/flow-coflow-logo.png","altText":"CoFlow Logo","caption":"CoFlow","width":114,"height":48,"elementId":""},"title":"CoFlow"},"footer":{"variant":"variant-b","colors":"colors-b","contacts":{"addressAltText":"Our address"},"copyrightText":"CoFlow","primaryLinks":[{"type":"Link","label":"Home","url":"/","altText":"Home"},{"type":"Link","label":"Contact Us","altText":"Contact Us","url":"https://wa.me/5521997806363?text=Ol%C3%A1","showIcon":false,"icon":"arrowRight","iconPosition":"right","elementId":""},{"type":"Link","label":"CURSO CADENCE","altText":"CURSO CADENCE","url":"/curso","showIcon":false,"icon":"arrowRight","iconPosition":"right","elementId":""},{"type":"Link","label":"TERMO DE USO","altText":"TERMO DE USO","url":"/termo-de-uso","showIcon":false,"icon":"arrowRight","iconPosition":"right","elementId":""},{"type":"Link","label":"POL√çTICA DE PRIVACIDADE","altText":"POL√çTICA DE PRIVACIDADE","url":"/politica-de-privacidade","showIcon":false,"icon":"arrowRight","iconPosition":"right","elementId":""}],"socialLinks":[{"type":"Social","label":"Email","altText":"","url":"mailto:diegofornalha@gmail.com","icon":"mail","style":"link","elementId":""},{"type":"Social","altText":"Instagram","label":"Instagram","url":"http://www.instagram.com/diegofornalha","icon":"instagram"},{"type":"Social","altText":"Linkedin","label":"Linkedin","url":"https://www.github.com/diegofornalha","icon":"github"},{"type":"Social","label":"Youtube","altText":"Youtube","icon":"youtube","style":"link","elementId":"","url":"https://www.youtube.com/diegofornalha"},{"type":"Social","altText":"Twitter","label":"Twitter","url":"https://twitter.com/diegofornalha","icon":"twitter"},{"type":"Social","label":"Linkedin","altText":"Linkedin","url":"https://linkedin.com/in/diegofornalha","icon":"linkedin","style":"link","elementId":""}],"styles":{"self":{"width":"narrow"}},"logo":{"type":"ImageBlock","url":"/images/padrao/flow-coflow-logo.png","altText":"CoFlow Logo","caption":"CoFlow Logo","width":114,"height":48,"elementId":""}},"defaultMetaTags":[{"type":"MetaTag","property":"og:title","content":"CoFlow"}],"titleSuffix":"Coflow","env":{}}},"__N_SSG":true}