{"pageProps":{"page":{"__metadata":{"id":"content/pages/blog/controle-basico-de-acesso-em-cadence.md","source":"sourcebit-source-filesystem","sourceName":"pages","sourcePath":"/Users/coflow/Desktop/digifi_ei/content/pages","relSourcePath":"blog/controle-basico-de-acesso-em-cadence.md","relProjectPath":"content/pages/blog/controle-basico-de-acesso-em-cadence.md","urlPath":"/blog/controle-basico-de-acesso-em-cadence","pageCssClasses":["page-blog","page-blog-controle-basico-de-acesso-em-cadence"]},"layout":"PostLayout","metaTitle":"Controle b√°sico de acesso em Cadence","addTitleSuffix":true,"metaTags":[],"title":"Controle b√°sico de acesso em Cadence","colors":"colors-d","date":"2022-12-10","excerpt":"O controle de acesso em contratos inteligentes escritos em Cadence, uma linguagem de programa√ß√£o para a plataforma Flow. O controle de acesso √© a restri√ß√£o de acesso a campos, fun√ß√µes e tipos em um contrato para determinados escopos e usu√°rios e √© importante para evitar vulnerabilidades no c√≥digo. O Cadence fornece duas camadas de controle de acesso: baseado em palavras-chave e baseado em capacidade. As palavras-chave \"pub\" e \"access(all)\" permitem que uma declara√ß√£o seja acess√≠vel em todos os escopos, enquanto \"in\" e \"access(self)\" restringem o acesso a um escopo espec√≠fico. O controle de acesso baseado em capacidade permite que um contrato conceda ou negue acesso a outros contratos com base em suas capacidades espec√≠ficas. √â recomendado que os desenvolvedores tenham um entendimento completo do controle de acesso em Cadence antes de implantar seus projetos na rede principal.","featuredImage":{"type":"ImageBlock","url":"/images/capas/Controle b√°sico de acesso em Cadence diegofornalha.png","altText":"Controle b√°sico de acesso em Cadence","caption":"O controle de acesso em contratos inteligentes escritos em Cadence, uma linguagem de programa√ß√£o para a plataforma Flow. O controle de acesso √© a restri√ß√£o de acesso a campos, fun√ß√µes e tipos em um contrato para determinados escopos e usu√°rios e √© importante para evitar vulnerabilidades no c√≥digo. O Cadence fornece duas camadas de controle de acesso: baseado em palavras-chave e baseado em capacidade. As palavras-chave \"pub\" e \"access(all)\" permitem que uma declara√ß√£o seja acess√≠vel em todos os escopos, enquanto \"in\" e \"access(self)\" restringem o acesso a um escopo espec√≠fico. O controle de acesso baseado em capacidade permite que um contrato conceda ou negue acesso a outros contratos com base em suas capacidades espec√≠ficas. √â recomendado que os desenvolvedores tenham um entendimento completo do controle de acesso em Cadence antes de implantar seus projetos na rede principal.","width":800,"height":450},"media":{"type":"ImageBlock","url":"/images/capas/Controle b√°sico de acesso em Cadence diegofornalha.png","altText":"Controle b√°sico de acesso em Cadence","caption":"O controle de acesso em contratos inteligentes escritos em Cadence, uma linguagem de programa√ß√£o para a plataforma Flow. O controle de acesso √© a restri√ß√£o de acesso a campos, fun√ß√µes e tipos em um contrato para determinados escopos e usu√°rios e √© importante para evitar vulnerabilidades no c√≥digo. O Cadence fornece duas camadas de controle de acesso: baseado em palavras-chave e baseado em capacidade. As palavras-chave \"pub\" e \"access(all)\" permitem que uma declara√ß√£o seja acess√≠vel em todos os escopos, enquanto \"in\" e \"access(self)\" restringem o acesso a um escopo espec√≠fico. O controle de acesso baseado em capacidade permite que um contrato conceda ou negue acesso a outros contratos com base em suas capacidades espec√≠ficas. √â recomendado que os desenvolvedores tenham um entendimento completo do controle de acesso em Cadence antes de implantar seus projetos na rede principal.","width":800,"height":450},"bottomSections":[],"metaDescription":"O controle de acesso em contratos inteligentes escritos em Cadence, uma linguagem de programa√ß√£o para a plataforma Flow. O controle de acesso √© a restri√ß√£o de acesso a campos, fun√ß√µes e tipos em um contrato para determinados escopos e usu√°rios e √© importante para evitar vulnerabilidades no c√≥digo. O Cadence fornece duas camadas de controle de acesso: baseado em palavras-chave e baseado em capacidade. As palavras-chave \"pub\" e \"access(all)\" permitem que uma declara√ß√£o seja acess√≠vel em todos os escopos, enquanto \"in\" e \"access(self)\" restringem o acesso a um escopo espec√≠fico. O controle de acesso baseado em capacidade permite que um contrato conceda ou negue acesso a outros contratos com base em suas capacidades espec√≠ficas. √â recomendado que os desenvolvedores tenham um entendimento completo do controle de acesso em Cadence antes de implantar seus projetos na rede principal.","socialImage":"/images/capas/Controle b√°sico de acesso em Cadence diegofornalha.png","markdown_content":"![https://miro.medium.com/max/347/1\\*M7p33-EGZPFdKcX7oR6mDg.jpeg](https://miro.medium.com/max/347/1\\*M7p33-EGZPFdKcX7oR6mDg.jpeg)\n\nIsso √© apenas para o administrador pressionar. N√£o pressione. Por favor. Pretty Please\n\nChegamos √† segunda semana sem esquecer o blog! Pegue isso, inimigos! üôå\n\nSe voc√™ √© novo aqui, seja bem-vindo! Este √© um blog semanal sobre o Cadence, o novo idioma de ponta do Flow para contratos inteligentes. Eu recomendo come√ßar com¬†[meu primeiro post sobre materiais para iniciantes](https://joshuahannan.medium.com/taking-your-first-steps-with-cadence-19dde86bbd0)¬†antes de ler isso, porque assumirei que os leitores j√° t√™m um entendimento b√°sico de Cadence ou simplesmente apreciam meu estilo de escrita. ( Estou lisonjeado! )\n\n# **O que √© controle de acesso?**\n\nControle de acesso √© a restri√ß√£o de campos, fun√ß√µes e tipos para determinados escopos e usu√°rios. √â extremamente importante que os desenvolvedores considerem profundamente para garantir que seu c√≥digo seja protegido contra poss√≠veis vulnerabilidades. Tecnologia Blockchain certamente¬†[teve seu quinh√£o de bugs e fa√ßanhas](https://forum.openzeppelin.com/t/list-of-ethereum-smart-contracts-post-mortems/1191)¬†e muitos deles poderiam ter sido impedidos com um controle de acesso mais bem gerenciado.\n\nAcredito que todo desenvolvedor deve ter um entendimento completo do controle de acesso Cadence antes mesmo de pensar em implantar seu projeto na rede principal. Altos padr√µes que conhe√ßo, mas estamos lidando com coisas com valor real aqui! ( e a maioria de voc√™s provavelmente n√£o vai me ouvir de qualquer maneira e apenas copie o c√≥digo Top Shot sem pensar nele )\n\nAo contr√°rio da maioria dos idiomas, o Cadence fornece duas camadas diferentes de controle de acesso, ambas incorporadas ao idioma:\n\n*   [Controle de acesso baseado em palavras-chave](https://docs.onflow.org/cadence/language/access-control/)\n*   [Controle de acesso baseado em capacidade](https://docs.onflow.org/cadence/language/capability-based-access-control/)\n\nEu recomendaria conferir isso antes de ler mais desta postagem.\n\nN√£o vou fornecer uma explica√ß√£o detalhada dos diferentes tipos de controle de acesso neste post, mas vou falar sobre alguns dos motivos para utiliz√°-los, e alguns exemplos de como eles podem ser usados efetivamente em contratos inteligentes.\n\n# **Dois tipos de controle de acesso em Cadence**\n\n## **Controle de acesso por palavra-chave**\n\nO primeiro tipo de controle de acesso em Cadence √© o tipo com o qual a maioria de voc√™s provavelmente conhece: Usando palavras-chave para especificar o n√≠vel de acesso de um campo espec√≠fico.\n\nO Cadence fornece quatro palavras-chave diferentes para especificar os n√≠veis de acesso. Cada campo, fun√ß√£o e tipo √© necess√°rio para especificar um n√≠vel de acesso.\n\n`pub`¬†ou¬†`access(all)`¬†significa que a declara√ß√£o √© acess√≠vel / vis√≠vel em todos os escopos. Cada um faz a mesma coisa, mas¬†`pub`¬†√© mais curto, por isso √© recomend√°vel usar.\n\nPor exemplo, um campo p√∫blico em um tipo pode ser acessado usando a sintaxe de acesso¬†`(`object.field`)`¬†em uma inst√¢ncia do tipo em um escopo externo. Isso n√£o permite que a declara√ß√£o seja publicamente grav√°vel.\n\nPortanto, se eu tivesse esse contrato implantado na minha conta:\n\n```\ncontrato de pub HelloWorld {    pub let sauda√ß√£o: Cordas    pub let sauda√ß√µesByLanguage: { String: String }    retorno divertido do pubGreeting ( ): Corda {\n        retornar self.greeting\n    }}\n```\n\nEm uma transa√ß√£o ou script, qualquer pessoa que importe o contrato da minha conta poder√° ler o¬†`greeting`¬†campo,¬†`greetingsByLanguage`¬†dicion√°rio ou ligue para o¬†`returnGreeting`¬†fun√ß√£o, mas eles n√£o podem substituir o valor inteiro nesses campos, com uma exce√ß√£o.\n\nSe houver um dicion√°rio p√∫blico ou campo de matriz, mesmo que n√£o possa ser substitu√≠do por algu√©m como este,\n\n```\nHelloWorld.greetingsByLanguage = { // N√£o √© poss√≠vel\n```\n\num elemento ainda pode ser modificado por algu√©m como este.\n\n```\nHelloWorld.greetingsByLanguage [ \"Espa√±ol\" ] = \"Hola\" // poss√≠vel\n```\n\nPor esse motivo, √© altamente recomend√°vel tornar todos os campos em contratos e tipos compostos privados,¬†`access(self)`, por padr√£o. Voc√™ pode definir configuradores e getters para seus campos. Vamos ver como isso se parece no contrato anterior.\n\n```\ncontrato de pub HelloWorld {    access ( self ) let greeting: String    access ( self ) let greetingsByLanguage: { String: String }    retorno divertido do pubGreeting ( ): Corda {\n        retornar self.greeting\n    }    pub fun returnLanguageGreeting ( _ idioma: String ): String? {\n        retornar self.greetingsByLanguage [ language ]\n    }}\n```\n\nIsso usa¬†`access(self)`, o que significa que a declara√ß√£o √© acess√≠vel / vis√≠vel apenas nos escopos atual e interno. Por exemplo, um¬†`access(self)`¬†O campo s√≥ pode ser acessado por fun√ß√µes do tipo que fazem parte, n√£o por c√≥digo em um escopo externo. Isso permite que o desenvolvedor seja capaz de definir explicitamente como seus campos s√£o acessados por getters e setters.\n\nAs outras duas palavras-chave de acesso s√£o um pouco exclusivas da Cadence.\n\n`access(contract)`significa que a declara√ß√£o √© acess√≠vel / vis√≠vel apenas no escopo do contrato que a definiu. Isso significa que outros tipos e fun√ß√µes definidos no mesmo contrato podem acess√°-lo, mas n√£o outros contratos na mesma conta.\n\nVoc√™ poderia ter algo assim:\n\n```\ncontrato de pub HelloWorld {    pub struct Ol√° {        acesso ( contrato ) var sauda√ß√£o: corda    }    pub fun returnGreeting ( _ ol√°: Ol√° ): Corda {\n        voltar ol√°.\n    }}\n```\n\nNesta situa√ß√£o, se voc√™ tivesse uma inst√¢ncia do¬†`Hello`¬†struct, voc√™ n√£o seria capaz de obter diretamente o¬†`greeting`¬†campo usando¬†`Hello.greeting`, mas desde o¬†`returnGreeting`¬†fun√ß√£o √© definida no mesmo contrato, voc√™ pode dar a ela¬†`Hello`¬†estruture e obtenha o¬†`greeting`¬†campo dessa maneira:\n\n```\nOl√°, Ol√°, Ol√°, Ol√°, Ol√°, Ol√°, = \"hola\" (// inv√°lido porque o campo √© contrato de acesso\ndeixe sauda√ß√£o = helloObject.greeting// V√°lido: a fun√ß√£o de contrato pode acessar o campo e\n// devolv√™-lo\ndeixe a sauda√ß√£o = HelloWorld.returnGreeting ( helloObject )// sauda√ß√£o √© \"hola\"\n```\n\nEste √© apenas um exemplo simples, mas tenho certeza de que voc√™ pode imaginar uma utiliza√ß√£o mais sofisticada dessa capacidade.\n\n`access(account)`significa que a declara√ß√£o √© acess√≠vel / vis√≠vel apenas no escopo de toda a conta onde √© definida. As contas de fluxo podem ter qualquer n√∫mero de contratos de cad√™ncia implantados para eles, portanto, essa palavra-chave significa que quaisquer outros contratos na mesma conta podem acess√°-lo.\n\nCom este campo, voc√™ pode declarar campos em contratos como¬†`access(account)`¬†, sabendo que voc√™ deseja que eles sejam ‚Äú privados ‚Äù por enquanto, mas mantendo aberta a possibilidade de implantar um novo contrato posteriormente que possa interagir com o primeiro contrato de novas maneiras. Voc√™ tamb√©m pode manter seus contratos mais simples, agrupando apenas funcionalidades semelhantes em um contrato, mas tendo contratos relacionados ainda na mesma conta que podem compartilhar algumas informa√ß√µes entre si.\n\nEssa palavra-chave √© a que tenho menos experi√™ncia em usar, mas recentemente tenho pensado em mais maneiras de us√°-la. Se voc√™ tiver algum exemplo de onde o usou, deixe um coment√°rio e me avise!\n\n## **Controle de acesso baseado em capacidade**\n\nA outra forma principal de controle de acesso em Cadence utiliza¬†[Seguran√ßa baseada em capacidade](https://en.wikipedia.org/wiki/Capability-based_security), um modelo de seguran√ßa que n√£o √© usado com muita frequ√™ncia. A maioria dos modelos de seguran√ßa ( e a maioria das outras linguagens de programa√ß√£o de contratos inteligentes ) restringem o acesso com base em¬†*quem voc√™ √©*, mas a seguran√ßa da capacidade √© mais sobre¬†*o que voc√™ possui*.\n\nVamos olhar para uma analogia:\n\n![https://miro.medium.com/max/700/1\\*uAtIjsm7b2QMc2f7bknWOg.png](https://miro.medium.com/max/700/1\\*uAtIjsm7b2QMc2f7bknWOg.png)\n\ntantas escolhas!\n\nImagem que voc√™ est√° projetando um dispositivo f√≠sico para o governo usar para gerenciar o acesso a importantes funcionalidades internas, como imprimir dinheiro, declarar guerra, pagar impostos etc. Todos no pa√≠s precisam ter acesso a algum subconjunto dessa funcionalidade, mas a especifica√ß√£o de acesso de cada pessoa √© diferente de muitas das outras pessoas. Por exemplo, todos precisam ter acesso √† funcionalidade ‚Äú pagar impostos ‚Äù, mas apenas funcion√°rios eleitos do governo precisam ter acesso √† ‚Äú declarar guerra ‚Äù e assim por diante.\n\nSe estiv√©ssemos projetando esse sistema da maneira que a maioria dos contratos inteligentes gerencia o acesso, com uma lista que indica quem tem acesso a qu√™, ent√£o esse dispositivo f√≠sico se pareceria com uma placa de controle gigante em um local p√∫blico com milhares de bot√µes diferentes para cada funcionalidade sobre a qual o governo tem algum controle. Qualquer pessoa na Terra seria capaz de caminhar at√© este quadro e pressionar qualquer um dos bot√µes, mas o bot√£o executaria algum tipo de varredura biom√©trica ( como uma varredura de √≠ris ou impress√£o digital ) para verificar se essa pessoa tem autoridade para executar a a√ß√£o. Se eles passarem na verifica√ß√£o, a funcionalidade acontecer√°. Existe at√© um bot√£o p√∫blico para alterar as regras de acesso!\n\nEste √© um exemplo artificial, mas tenho certeza de que voc√™ pode ver os problemas com isso. Se algum dos bot√µes n√£o foi projetado corretamente ou est√° com defeito, qualquer pessoa na Terra seria capaz de explorar o bot√£o quebrado para fazer coisas que n√£o deveria!\n\nUma solu√ß√£o mais eficaz para esse problema seria fornecer a cada cidad√£o um dispositivo que contenha apenas os bot√µes de funcionalidade que eles podem acessar. Em seguida, cada cidad√£o armazena esse dispositivo em um local seguro em sua casa ou seguro que somente eles podem acessar. Agora, se houver uma vulnerabilidade em um dos bot√µes, um invasor tem a dif√≠cil tarefa de invadir cada casa dos participantes e se proteger individualmente, o que √© muito mais dif√≠cil e demorado.\n\n√â isso que os recursos realizam em Cadence. Em vez de criar uma lista especial de controle de acesso com regras opacas e complexas, o controle de acesso √© incorporado aos fundamentos do sistema de tipos Cadence. Os usu√°rios obt√™m objetos de recursos especiais que armazenam em sua conta que definem qual funcionalidade eles podem acessar.\n\nUsando o exemplo acima, criar√≠amos um¬†`HelloAdmin`¬†recurso que permite ao propriet√°rio atualizar o¬†`greeting`¬†campo:\n\n```\ncontrato de pub HelloWorld {    // Isso precisa ser um acesso ( contract ) para que o recurso definido em\n    // o mesmo contrato pode acess√°-lo\n    acesso ( contrato ) var sauda√ß√£o: corda    retorno divertido do pubGreeting ( ): Corda {\n        retornar self.greeting\n    }    // Somente o propriet√°rio deste objeto de recurso pode chamar essa fun√ß√£o\n    recurso de pub HelloAdmin {\n        pub fun modificGreeting ( _ newGreeting: String ) {\n            HelloWorld.greeting = newGreeting\n        }\n    }\n}\n```\n\nOs atacantes nem sequer teriam a oportunidade de explorar muitos bugs em potencial, porque o c√≥digo nem sequer √© acess√≠vel a eles para tentar explorar em primeiro lugar!\n\nOs recursos s√£o um assunto complexo, e estou planejando fazer uma postagem no blog no futuro que seja completamente dedicada a eles. Por enquanto, eu recomendaria verificar¬†[post deste blog](https://medium.com/@kleffew/what-is-capability-based-security-227c6e5483a5)¬†sobre recursos gen√©ricos e¬†[Documenta√ß√£o de capacidade de cad√™ncia](https://docs.onflow.org/cadence/language/capability-based-access-control/).\n\n# **Conclus√£o**\n\nEspero ter deixado alguns dos recursos de controle de acesso do Cadence um pouco mais claros para voc√™.\n\nCompartilhe todos os usos interessantes dos recursos de controle de acesso da Cadence que voc√™ fez ou viu outros implementarem!\n\nSe voc√™ tiver alguma d√∫vida, toda a equipe e comunidade do Flow est√° aqui para apoi√°-lo! N√£o hesite em entrar em contato com nosso servidor Discord, o Flow Forum ou atrav√©s de um problema no repo Flow Github.\n\nExistem outros t√≥picos ou projetos interessantes que voc√™ sabe que seriam √∫teis para os rec√©m-chegados ou sobre os quais voc√™ gostaria que eu escrevesse uma postagem no blog? Sinta-se √† vontade para comentar com suas id√©ias e eu posso inclu√≠-las em um post futuro!\n\nArtigo original em ingl√™s: https://joshuahannan.medium.com/basic-access-control-in-cadence-28c5765c6ec0\n"},"site":{"__metadata":{"id":"content/data/config.json","source":"sourcebit-source-filesystem","sourceName":"data","sourcePath":"/Users/coflow/Desktop/digifi_ei/content/data","relSourcePath":"config.json","relProjectPath":"content/data/config.json"},"type":"Config","header":{"headerVariant":"variant-b","isSticky":true,"primaryColors":"colors-b","secondaryColors":"colors-d","isTitleVisible":false,"primaryLinks":[{"type":"Link","label":"Home","altText":"Inicio","url":"/","showIcon":false,"icon":"arrowRight","iconPosition":"right","elementId":""},{"type":"DropdownLink","label":"About","dropdownLinks":[{"type":"Link","label":"Curso Cadence","url":"/curso","altText":"Curso Cadence"},{"type":"Link","label":"Blog","altText":"Blog","url":"/blog","showIcon":true,"icon":"arrowRight","iconPosition":"right","elementId":""},{"type":"Link","label":"Learn More","altText":"","url":"/curso","showIcon":false,"icon":"arrowRight","iconPosition":"right","elementId":""}]},{"type":"DropdownLink","label":"Volunteers","dropdownLinks":[{"type":"Link","label":"2023","altText":"Link to 2023 team's page","url":"/registro/2023","showIcon":false,"icon":"arrowRight","iconPosition":"right","elementId":""},{"type":"Link","label":"Advocates","altText":"Advocates","url":"https://flow.coflow.com.br/flow-brasil-embaixador-aprendiz/","showIcon":true,"icon":"arrowRight","iconPosition":"right","elementId":""}]},{"type":"DropdownLink","label":"Partnerships","altText":"Parcerias","dropdownLinks":[{"type":"Link","label":"GeekHunter","altText":"Recurtamento e Sele√ß√£o","url":"/2023/janeiro/parcerias/geekhunter/","showIcon":true,"icon":"arrowRight","iconPosition":"left","elementId":""},{"type":"Link","label":"News","altText":"Novidades","url":"/2023/janeiro/news","showIcon":true,"icon":"arrowRight","iconPosition":"right","elementId":""}]},{"type":"Link","label":"Blog ","altText":"Blog","url":"/blog","showIcon":true,"icon":"arrowRightCircle","iconPosition":"left","elementId":""}],"secondaryLinks":[{"type":"Button","label":"Join Discord","altText":"Entrar no Discord","style":"secondary","url":"https://discord.com/invite/hT8EpC5mUN","showIcon":true,"icon":"cart","iconPosition":"right","elementId":""}],"styles":{"self":{"width":"wide","padding":["pl-5","pt-5","pb-5","pr-5"]}},"logo":{"type":"ImageBlock","url":"/images/padrao/flow-coflow-logo.png","altText":"CoFlow Logo","caption":"CoFlow","width":114,"height":48,"elementId":""},"title":"CoFlow"},"footer":{"variant":"variant-b","colors":"colors-b","contacts":{"addressAltText":"Our address"},"copyrightText":"CoFlow","primaryLinks":[{"type":"Link","label":"Home","url":"/","altText":"Home"},{"type":"Link","label":"Contact Us","altText":"Contact Us","url":"https://wa.me/5521997806363?text=Ol%C3%A1","showIcon":false,"icon":"arrowRight","iconPosition":"right","elementId":""},{"type":"Link","label":"CURSO CADENCE","altText":"CURSO CADENCE","url":"/curso","showIcon":false,"icon":"arrowRight","iconPosition":"right","elementId":""},{"type":"Link","label":"TERMO DE USO","altText":"TERMO DE USO","url":"/termo-de-uso","showIcon":false,"icon":"arrowRight","iconPosition":"right","elementId":""},{"type":"Link","label":"POL√çTICA DE PRIVACIDADE","altText":"POL√çTICA DE PRIVACIDADE","url":"/politica-de-privacidade","showIcon":false,"icon":"arrowRight","iconPosition":"right","elementId":""}],"socialLinks":[{"type":"Social","label":"Email","altText":"","url":"mailto:diegofornalha@gmail.com","icon":"mail","style":"link","elementId":""},{"type":"Social","altText":"Instagram","label":"Instagram","url":"http://www.instagram.com/diegofornalha","icon":"instagram"},{"type":"Social","altText":"Linkedin","label":"Linkedin","url":"https://www.github.com/diegofornalha","icon":"github"},{"type":"Social","label":"Youtube","altText":"Youtube","icon":"youtube","style":"link","elementId":"","url":"https://www.youtube.com/diegofornalha"},{"type":"Social","altText":"Twitter","label":"Twitter","url":"https://twitter.com/diegofornalha","icon":"twitter"},{"type":"Social","label":"Linkedin","altText":"Linkedin","url":"https://linkedin.com/in/diegofornalha","icon":"linkedin","style":"link","elementId":""}],"styles":{"self":{"width":"narrow"}},"logo":{"type":"ImageBlock","url":"/images/padrao/flow-coflow-logo.png","altText":"CoFlow Logo","caption":"CoFlow Logo","width":114,"height":48,"elementId":""}},"defaultMetaTags":[{"type":"MetaTag","property":"og:title","content":"CoFlow"}],"titleSuffix":"Coflow","env":{}}},"__N_SSG":true}